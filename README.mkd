# Property Mappings Server

A Node.js server that manages property mappings between native systems and HubSpot, featuring OAuth integration, Prisma database management, and a caching layer for optimized HubSpot API interactions.

## Table of Contents
- [What this project does](#what-this-project-does)
- [Why is this project useful](#why-is-this-project-useful)
- [Getting started with the project](#getting-started-with-the-project)
  - [Setup](#setup)
  - [Scopes](#scopes)
- [Endpoints](#endpoints)
  - [Authentication Endpoints](#authentication-endpoints)
  - [Properties Endpoints](#properties-endpoints)
  - [Mappings Endpoints](#mappings-endpoints)
- [Available Scripts](#available-scripts)
- [Dependencies](#dependencies)
  - [Core](#core)
  - [Development](#development)
- [Where to get help?](#where-to-get-help)
- [Who maintains and contributes to this project](#who-maintains-and-contributes-to-this-project)
- [License](#license)

## What this project does

This project is an Express.js application designed to integrate with HubSpot's API, facilitating the management and synchronization of properties and mappings between a native system and HubSpot.
For the client-side interface, please refer to the [React frontend repository](https://github.com/hubspotdev/property-mapping-client) which works in conjunction with this backend application.

### Key Concepts

#### Properties
Properties in HubSpot are fields that store information about CRM objects (contacts, companies, etc.). For instance, a contact can have properties like "First Name", "Last Name", or custom properties specific to your business needs.-Property definition involves specifying the nature and characteristics of the property, such as its type (string, number, etc.), whether it's required, and any validation rules.:

- **Name**: Unique identifier for the property
- **Label**: Display name shown in the HubSpot interface
- **Type**: Data type of the property (String, Number, Option)
- **Object**: The CRM object it belongs to (Contact or Company)
- **Unique**: Whether the property should have unique values
- **CustomerId**: Identifier for the customer who owns the property
- **ModificationMetadata**: Information about when and who modified the property

#### Property Mappings
Property mapping refers to the configuration process where users set up the rules or criteria that define how properties from their native system should map to HubSpot properties. This ensures data consistency when syncing between systems.:

- **NativeName**: Name of the property in your native system
- **HubspotName**: Name of the corresponding HubSpot property
- **HubspotLabel**: Display label for the HubSpot property
- **Object**: Type of object (Contact or Company)
- **Direction**: Data flow direction (toHubSpot, toNative, or biDirectional)
- **CustomerId**: Identifier for the customer who owns the mapping
- **ModificationMetadata**: Information about when and who modified the mapping

## Why is this project useful

- **Comprehensive Property Management**: Provides endpoints for managing properties and their mappings between native systems and HubSpot, allowing for complex data synchronization.
- **Data Consistency**: Ensures data consistency across platforms by:
  - Maintaining property mappings in a local database
  - Caching HubSpot property definitions to reduce API calls
  - Validating property types and formats
  - Handling bidirectional updates between systems
- **Performance Optimization**: Implements caching to reduce API calls to HubSpot
- **Type Safety**: Ensures data integrity through TypeScript and proper validation

## Getting started with the project:

### Setup:

1. Clone the repo

2. If you haven't done so yet, please make sure to install [Docker](https://www.docker.com/get-started/) on your local environment.

3. Create the .env file with these entries (see .env.example):
   - DATABASE_URL - PostgreSQL connection string
   - POSTGRES_USER - PostgreSQL username (default: postgres)
   - POSTGRES_PASSWORD - PostgreSQL password (default: postgres)
   - POSTGRES_DB - PostgreSQL database name (default: hubspot_sync)
   - OAUTH_SERVICE_URL - URL of the external OAuth service

4. Ensure the OAuth service is running and accessible. The OAuth service must have the following HubSpot scopes configured for this application to function properly:
   - `crm.schemas.companies.write` - Create, delete, or make changes to property settings for companies
   - `crm.schemas.contacts.write` - Create, delete, or make changes to property settings for contacts
   - `crm.schemas.companies.read` - View details about property settings for companies
   - `crm.schemas.contacts.read` - View details about property settings for contacts

5. Build and run the application:
   ```bash
   # For development:
   docker-compose up --build

   # For production:
   docker-compose -f docker-compose.yml up --build
   ```

### Endpoints:

### Properties Endpoints

- `GET /api/hubspot-properties`: Retrieves all HubSpot properties, leveraging cache to improve performance.

- `GET /api/hubspot-properties-skip-cache`: Retrieves all HubSpot properties bypassing cache to ensure up-to-date data.

- `POST /api/native-properties`: Creates new native properties in the system based on data sent in the request body.

### Mappings Endpoints

- `GET /api/native-properties-with-mappings`: Retrieves native properties along with their HubSpot mappings for the authenticated customer.

- `POST /api/mappings`: Saves a new mapping between native properties and HubSpot properties.

- `DELETE /api/mappings/{mappingID}` Deletes a specified mapping by its ID.

#### API Documentation

- `GET /api-docs`
  - Swagger UI documentation for all endpoints
  - Interactive API testing interface


### Available Scripts

- `docker-compose up` - Start the application and database
- `docker-compose down -v` - Stop the application and remove volumes
- `docker-compose exec app npm run seed` - Seed the database
- `docker-compose exec app npm test` - Run test suite
- `docker-compose exec app npm run test:watch` - Run tests in watch mode
- `docker-compose exec app npm run test:coverage` - Generate test coverage report

### Dependencies

All dependencies are automatically handled by Docker. However, for reference, here are the key packages used:

#### Core Dependencies
These are included in the Docker container:
- @hubspot/api-client: ^12.0.1 - HubSpot API client
- @prisma/client: ^5.21.0 - Database ORM
- axios: ^1.7.7 - HTTP client
- dotenv: ^16.4.5 - Environment configuration
- express: ^4.21.1 - Web framework
- form-data: ^4.0.1 - Form data handling
- swagger-jsdoc: ^6.2.8 - API documentation generation
- swagger-ui-express: ^5.0.1 - API documentation UI

#### Development Dependencies
These are also included in the Docker environment:
- TypeScript and Node.js types
  - typescript: ^4.0.0
  - @types/node: ^22.7.5
  - @types/express: ^5.0.0
  - @types/jest: ^29.0.0
  - @types/supertest: ^6.0.2
  - @types/swagger-jsdoc: ^6.0.4
  - @types/swagger-ui-express: ^4.1.7

- Testing
  - jest: ^29.0.0
  - @jest/globals: ^29.0.0
  - jest-mock-extended: ^3.0.7
  - ts-jest: ^29.0.0
  - supertest: ^6.3.4

- Development tools
  - nodemon: ^3.1.7 - Development server
  - ts-node: ^10.9.2 - TypeScript execution
  - prisma: ^5.21.0 - Database toolkit

- Code quality
  - eslint: ^9.12.0
  - @eslint/js: ^9.12.0
  - @typescript-eslint/eslint-plugin: ^8.10.0
  - @typescript-eslint/parser: ^8.10.0
  - eslint-config-prettier: ^9.1.0
  - prettier: ^3.3.3
  - prettier-plugin-prisma: ^5.0.0
  - globals: ^15.11.0
  - typescript-eslint: ^8.10.0

## Where to get help?

If you encounter any bugs or issues, please report them by opening a GitHub issue. For feedback or suggestions for new code examples, we encourage you to use this [form](https://survey.hsforms.com/1RT0f09LSTHuflzNtMbr2jA96it).

## Who maintains and contributes to this project

Various teams at HubSpot that focus on developer experience and app marketplace quality maintain and contribute to this project. In particular, this project was made possible by @therealdadams, @rahmona-henry, @zman81988, @natalijabujevic0708, and @zradford

## License

MIT
