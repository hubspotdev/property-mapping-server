# Property Mappings Server

## What this project does:

This project is an Express.js application designed to integrate with HubSpot's API, facilitating the management and synchronization of properties and mappings between a native system and HubSpot.
For the client-side interface, please refer to the [React frontend repository](https://github.com/hubspotdev/property-mapping-client) which works in conjunction with this backend application.


## Why is this project useful:
This project streamlines the management of custom properties and mappings within your CRM ecosystem. It helps maintain data consistency between an organizationâ€™s native system and HubSpot, reducing manual data entry and improving efficiency.


The application performs the following functions:

- Facilitates OAuth 2.0 authentication with HubSpot to obtain access tokens for making API requests.
- Manages custom property groups and properties in HubSpot for contacts and companies.
- Provides endpoints for retrieving HubSpot properties, both with and without local caching.
- Integrates native system properties with HubSpot, allowing for property creation and mappings between the systems.
- Handles CRUD operations for property mappings, stored in a Prisma-managed database.


## Endpoints:

- **GET /api/install**: Initiates the OAuth installation process and returns the authorization URL for HubSpot.

- **GET /oauth-callback**: Endpoint for handling HubSpot OAuth callback, processing the provided code to obtain an access token.

- **GET /api/hubspot-properties**: Retrieves all HubSpot properties, leveraging cache to improve performance.

- **GET /api/hubspot-properties-skip-cache**: Retrieves all HubSpot properties bypassing cache to ensure up-to-date data.

- **POST /api/native-properties/**: Creates new native properties in the system based on data sent in the request body.

- **GET /api/native-properties-with-mappings**: Retrieves native properties along with their HubSpot mappings for the authenticated customer.

- **POST /api/mappings**: Saves a new mapping between native properties and HubSpot properties.

- **DELETE /api/mappings/** :mappingId: Deletes a specified mapping by its ID.


## Getting started with the project:

Setup:

1. Download and install [PostgreSQL](https://www.postgresql.org/download/), make sure it's running, and create an empty database. You need the username and password (defaults username is postgres and no password)
2. Clone the repo
3. Create the .env file with these entries (see examples in the [.env.example](./.env.example) file):
   - DATABASE_URL the (local) url to the postgres database (e.g. `postgresql://{username}:{password}@localhost:5432/{database name}`)
   - CLIENT_ID from Hubspot public app
   - CLIENT_SECRET from Hubspot public app
4. Run `npm install` to install the required Node packages.
5. Run `npm run db-init` to create the necessary tables in PostgreSQL
6. Optional: Run `npm run seed` to seed the database with test data

### Running the Application:
- **Development Mode**: Start the application in development mode to run locally with live reload.

    `npm run dev`

- **Production Mode**: Build the TypeScript files and start the application in production mode.

    - Build the project:

    `npm run build`

    - Run in production:

    `npm run prod`

### Additional Commands:

**Initialize Database**: If you've made changes to the Prisma schema, you might need to push the new schema to your database and seed it again.

`npx prisma db push`

`npx prisma db seed`


## Where to get help?

Please open an issue to report bugs or request features.

## Who maintains and contributes to this project

Various teams at HubSpot that focus on developer experience and app marketplace quality maintain and contribute to this project. In particular, this project was made possible by @therealdadams, @rahmona-henry, and @zman81988.
